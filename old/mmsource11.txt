Main.FocusOnConvertButton:Sub FocusOnConvertButton()  If StartupHasFinished Then    ConvertButton.Default = True    NowButton.Default = False  End IfEnd SubMain.FocusOnNowButton:Sub FocusOnNowButton()  NowButton.Default = True  ConvertButton.Default = FalseEnd SubMain.Open:Sub Open()  Dim Gregorian as date    StartupHasFinished = False  FocusOnNowButton    Gregorian = new date  MoField.Text =  str(Gregorian.Month)  DayField.Text =  str(Gregorian.Day)  YearField.Text =  str(Gregorian.Year)    StartupHasFinished = True  End SubMain.DayField.TextChange:Sub TextChange()  FocusOnConvertButtonEnd SubMain.YearField.TextChange:Sub TextChange()  FocusOnConvertButtonEnd SubMain.ConvertButton.Action:Sub Action()  Dim PJD, ShirePJD, GregYear, GregMonth, GregDay as integer  Dim Txt, Stardate as String  Dim LeapYear as boolean  Dim JDN, MJD, S as double  Dim TheTime as date  Dim GregTS, WorldCalTS, ShireTS, EldarinTS, StardateTS as String  Dim RTN, JDN_TS, MJD_TS, PJD_TS as String  Dim DiscoTS, IllumTS, BahaiTS, SunsetStr as String  Dim BahaiDate, G, T as mmDate    ReadLocationPrefs    RTN = chr(13)  Txt = ""    GregYear = val (YearField.Text)  GregMonth = val (MoField.Text)  GregDay = val (DayField.Text)  LeapYear = GregYearIsLeapYear(GregYear)    G = new mmDate  G = MakeDate(GregYear,GregMonth,GregDay)    If GregDateIsValid(GregMonth, GregDay, GregYear) Then        JDN = JDNFromGregDate(GregMonth, GregDay, GregYear)    JDN_TS = "Julian Day Number (JDN): " + format(JDN,"-#########.0#")        T = New mmDate    S = SunsetFromJDN(JDN)    T = HMSTimeFromDecimalTime(S)    SunsetStr = "Sunset at " + RoundTimeString(T) + " [not adjusted for DST]"        MJD = MJDFromJDN(JDN)    MJD_TS = "Modified JDN (MJD): " + format(MJD,"-#########.0#")        PJD = GregPJDFromGregDate(GregMonth, GregDay, GregYear)    PJD_TS = "Pseudo-Julian Day (PJD): " + str(PJD)        GregTS = "Gregorian: " + GregDateString(GregMonth,GregDay,GregYear)        WorldCalTS =  "World Calendar: " + WorldCalDateFromGregPJDAndYear(PJD,GregYear)        ShirePJD = ShirePJDFromGregPJDAndLeapYear (PJD, LeapYear)    ShireTS = "Shire Reckoning: " + ShireDateFromGregDate(GregMonth, GregDay, GregYear)        EldarinTS = "Eldarin: " + EldarDateFromJDN(JDN) + " [until sunset]"        Stardate = StardateFromMJDAndLocalSecs(MJD, 0)    If Stardate = "UNSUPPORTED" Then      StardateTS = "Stardates currently unsupported later than 26 Jan 2270, 00:00 UTC (Stardate [19]7340.00)."    Else      StardateTS = "Stardate: " + Stardate + " at local midnight"    End If        DiscoTS = "Discordian: " + DiscoDateString(DiscoDateFromJDN(JDN))    IllumTS = "Illuminati: " + IllumDateString(DiscoDateFromJDN(JDN))        BahaiDate = New mmDate    BahaiDate = BahaiDateFromJDN(JDN)    BahaiTS = "Bah‡'’: " + BahaiDateString(BahaiDate) + " [until sunset]"        Txt = JDN_TS + RTN + MJD_TS + RTN + PJD_TS + RTN + SunsetStr + RTN + RTN        If GregStr="1" Then      Txt = Txt + GregTS + RTN    End If        If WCStr="1" Then      Txt = Txt + WorldCalTS + RTN    End If        If ShireStr="1" Then      Txt = Txt + ShireTS + RTN    End If        If EldarinStr="1" Then      Txt = Txt + EldarinTS + RTN    End If        If StardateStr="1" Then      Txt = Txt + StardateTS + RTN    End If        If DiscoStr="1" Then      Txt = Txt + DiscoTS + RTN    End If        If IllumStr="1" Then      Txt = Txt + IllumTS + RTN    End If        If BahaiStr="1" Then      Txt = Txt + BahaiTS + RTN    End If        Txt = Txt + RTN + "=====" + RTN + RTN      Else    Beep    Txt = "ERROR: Either that date does not exist on the Gregorian calendar, or "    Txt = Txt + "Many Moons cannot calculate dates that far back in time." + RTN  End If    ResultField.Text = Txt  End SubMain.NowButton.Action:Sub Action()  Dim PJD as integer  Dim JDN, MJD as double  Dim G as date  Dim CurrentStardate, SwatchDateStr as string  Dim SwatchDate as mmDate  Dim TS, GregTimestamp, ShireTimestamp, StardateTimestamp, SwatchTimestamp as string  Dim WorldCalTimestamp, UdtTimestamp as String  Dim EldarinTimestamp as string  Dim DiscoTimestamp, IllumTimestamp as String  Dim SecondsSinceLocalMidnight as double  Dim RTN, Test, TZ as string  Dim Swatchbeat as integer  Dim TheSwatch_BMT_MJD, BMT_JDN as double  Dim c as Clipboard  Dim BahaiDate as mmDate  Dim BahaiTimestamp as String  Dim EldarDate as String    ReadLocationPrefs    SwatchDate = New mmDate    RTN = chr(13)  G = new date    JDN = JDNFromGregDate(G.Month, G.Day, G.Year)  MJD = MJDFromJDN(JDN)    GregTimestamp = "Gregorian: " + GregDateString(G.Month,G.Day,G.Year)  GregTimestamp = GregTimestamp + ", " + G.LongTime + " (UTC " + format(AdjTimezone, "+00") + ")"    PJD = GregPJDFromGregDate(G.Month, G.Day, G.Year)  WorldCalTimestamp = "World Calendar: " + WorldCalDateFromGregPJDAndYear(PJD,G.Year)    ShireTimestamp = "Shire Reckoning: " + ShireDateFromGregDate(G.Month, G.Day, G.Year)    If AfterSunsetNow Then    EldarDate = EldarDateFromJDN(JDN+1)  Else    EldarDate = EldarDateFromJDN(JDN)  End If  EldarinTimestamp = "Eldarin: " + EldarDate    SecondsSinceLocalMidnight = SecsSinceMidnight(G.Hour,G.Minute,G.Second)  CurrentStardate = StardateFromMJDAndLocalSecs(MJD, SecondsSinceLocalMidnight)  StardateTimestamp = "Stardate: " + CurrentStardate    Swatchbeat = SwatchbeatFromLocalTime(G.Hour,G.Minute,G.Second)  TheSwatch_BMT_MJD = Swatch_BMT_MJD(MJD,SecondsSinceLocalMidnight)  BMT_JDN = JDNFromMJD(TheSwatch_BMT_MJD)  SwatchDate = GregDateFromJDN(BMT_JDN)  SwatchDateStr = GregDateString(SwatchDate.Month,SwatchDate.Day,SwatchDate.Year)  SwatchTimestamp = "Swatch Internet Time: @" + format(Swatchbeat,"000") + " (" + SwatchDateStr + " BMT)"    UdtTimestamp = "Universal Date and Time (Udt): " + UdtFromMJDAndLocalTime(MJD,G.Hour,G.Minute,G.Second)    DiscoTimestamp = "Discordian: " + DiscoDateString(DiscoDateFromJDN(JDN))  IllumTimestamp = "Illuminati: " + IllumDateString(DiscoDateFromJDN(JDN))    BahaiDate = New mmDate  If AfterSunsetNow Then    BahaiDate = BahaiDateFromJDN(JDN+1)  Else    BahaiDate = BahaiDateFromJDN(JDN)  End If  BahaiTimestamp = "Bah‡'’: " + BahaiDateString(BahaiDate)    TS = ""    If GregStr="1" Then    TS = TS + GregTimestamp + RTN  End If    If WCStr="1" Then    TS = TS + WorldCalTimestamp + RTN  End If    If SwatchStr="1" Then    TS = TS + SwatchTimestamp + RTN  End If    TS = TS + UdtTimeStamp + RTN    If ShireStr="1" Then    TS = TS + ShireTimestamp + RTN  End If    If EldarinStr="1" Then    TS = TS + EldarinTimestamp + RTN  End If    If StardateStr="1" Then    TS = TS + StardateTimestamp + RTN  End If    If DiscoStr="1" Then    TS = TS + DiscoTimestamp + RTN  End If    If IllumStr="1" Then    TS = TS + IllumTimeStamp + RTN  End If    If BahaiStr="1" Then    TS = TS + BahaiTimestamp + RTN  End If    TS = TS + RTN + "=====" + RTN + RTN    ResultField.Text = TS    'Copy timestamp to clipboard for instant pasting  c = new Clipboard  c.text = TS  c.close  End SubMain.MoField.TextChange:Sub TextChange()  FocusOnConvertButtonEnd SubMain.GottButton.Action:Sub Action()  Dim PJD, ShirePJD, GregYear, GregMonth, GregDay as integer  Dim Txt, Stardate as String  Dim LeapYear as boolean  Dim JDN, MJD, S as double  Dim TheTime, GNow as date  Dim GregTS, WorldCalTS, ShireTS, EldarinTS, StardateTS as String  Dim RTN, JDN_TS, MJD_TS, PJD_TS as String  Dim DiscoTS, IllumTS, BahaiTS, SunsetStr as String  Dim BahaiDate, G, T as mmDate  Dim OriginJDN, NowJDN, LowEndJDN, HighEndJDN, DaysSurvived as Double  Dim LowEndYears, HighEndYears as Double  Dim LowEndDays, HighEndDays as Integer  Dim LowEndStr, HighEndStr as String    ReadLocationPrefs    RTN = chr(13)  Txt = ""    GregYear = val (YearField.Text)  GregMonth = val (MoField.Text)  GregDay = val (DayField.Text)  LeapYear = GregYearIsLeapYear(GregYear)    If GregDateIsValid(GregMonth, GregDay, GregYear) Then        OriginJDN = JDNFromGregDate(GregMonth, GregDay, GregYear)        GNow = new Date    NowJDN = JDNFromGregDate(GNow.Month, GNow.Day, GNow.Year)        DaysSurvived = NowJDN - OriginJDN        If DaysSurvived > 0 Then            LowEndDays = DaysSurvived/39      LowEndJDN = NowJDN + Round(LowEndDays)      LowEndYears = LowEndDays/365.25      LowEndYears = (Round(LowEndYears*1000))/1000            If LowEndDays <= 365 Then        LowEndStr = "LOW END ESTIMATE: " + Str(LowEndDays) + " days" + RTN + RTN + TimestampFromJDN(LowEndJDN)      Else        LowEndStr = "LOW END ESTIMATE: " + Format(LowEndYears,"#####.000") + " years" + RTN + RTN + TimestampFromJDN(LowEndJDN)      End If            HighEndDays = DaysSurvived*39      HighEndJDN = NowJDN + Round(HighEndDays)      HighEndYears = HighEndDays/365.25      HighEndYears = (Round(HighEndYears*1000))/1000            If HighEndDays <= 365 Then        HighEndStr = "HIGH END ESTIMATE: " + Str(HighEndDays) + " days" + RTN + RTN + TimestampFromJDN(HighEndJDN)      Else        HighEndStr = "HIGH END ESTIMATE: " + Format(HighEndYears,"#####.000") + " years" + RTN + RTN + TimestampFromJDN(HighEndJDN)      End If            Txt = LowEndStr + RTN + RTN + HighEndStr          Else      Beep      Txt = "ERROR: You must enter a date in the past. Many Moons can only apply the Copernican Principle "      Txt = Txt + "to objects and events that have already started."    End If      Else    Beep    Txt = "ERROR: Either that date does not exist on the Gregorian calendar, or "    Txt = Txt + "Many Moons cannot calculate dates that far back in time." + RTN  End If    ResultField.Text = Txt  End SubSwatchClockThread.Display:Sub Display()  if OldBeat <> CurBeat then     SwatchClockWin.BeatField.text = "@" + format(CurBeat, "000")    OldBeat = CurBeat  end ifEnd SubSwatchClockThread.Run:Sub Run()  Dim delta, TicksSinceMidnightBMT, TicksPerBeat, BeatsPerDay as integer  TicksPerBeat = 5184 '(84.6 seconds, or 1/1000th part of a day)  BeatsPerDay = 1000  while not SwatchStop     delta = ticks - SwatchClockWin.ticksStart    TicksSinceMidnightBMT = SwatchClockWin.InitialTicksSinceMidnightBMT + delta    CurBeat = (TicksSinceMidnightBMT / TicksPerBeat) mod BeatsPerDay    Display  wendEnd SubSwatchClockWin.Close:Sub Close()  SwatchStop = trueEnd SubSwatchClockWin.Open:Sub Open()  Dim T as date  Dim BielTimeZone as integer  dim C as SwatchClockThread    BielTimeZone = AdjTimezone - 1   'Biel Mean Time = Central Europe Time = GMT + 1    T = new date  TicksStart = ticks  InitialTicksSinceMidnightBMT = (216000*T.Hour)+(3600*T.Minute)+(60*T.Second) - (BielTimeZone * 216000)    If not SwatchStop then    C = new SwatchClockThread    C.Display    C.Run  End if    End SubWelcome.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  Welcome.HideEnd FunctionApp.Close:Sub Close()  WritePrefsEnd SubApp.Open:Sub Open()    ReadPrefs    SwatchStop = false  StardateStop = false  UdtStop = false    GregDataInit  WorldCalDataInit  ShireDataInit  EldarDataInit   DiscoDataInit  BahaiDataInit  IllumDataInit    CalculatePi  End SubApp.EnableMenuItems:Sub EnableMenuItems()  CalendarsConvert.Enabled = true  ClocksSwatchInternetTime.Enabled = true  ClocksStardate.Enabled = true  ClocksUniversalTimeUdt.Enabled = true  AppleAbout.Enabled = true  FilePreferences.Enabled = TrueEnd SubStardateClockThread.Display:Sub Display()    if OldStardate <> CurStardate then     StardateClockWin.SDField.text = CurStardate    OldStardate = CurStardate  end ifEnd SubStardateClockThread.Run:Sub Run()    Dim MinutesPerUnit as Integer  Dim G as date  Dim MJD, JDN, Secs as double    MinutesPerUnit = 288    while not StardateStop         'Calculate preliminaries from current Gregorian moment    G = new Date    JDN = JDNFromGregDate(G.Month, G.Day, G.Year)    MJD = MJDFromJDN(JDN)    Secs = SecsSinceMidnight(G.Hour, G.Minute, G.Second)        'Get and display current stardate (from time in G)    CurStardate = StardateFromMJDAndLocalSecs(MJD, Secs)    Display  wend  End SubStardateClockWin.Close:Sub Close()  StardateStop = trueEnd SubStardateClockWin.Open:Sub Open()    Dim T as date  Dim C as StardateClockThread    T = new date  TicksStart = ticks  InitialTicksSinceMidnight = (216000*T.Hour)+(3600*T.Minute)+(60*T.Second) - (AdjTimeZone * 216000)    If not StardateStop then    C = new StardateClockThread    C.Display    C.Run  End if    End SubManyMoonsModule.EldarDataInit:Sub EldarDataInit()  dim i as integer    '(x,0) is Quenya  EldarMoNames(1,0) = "Yestar‘"  EldarMoNames(2,0) = "Tuil‘"  EldarMoNames(3,0) = "Lair‘"  EldarMoNames(4,0) = "Y‡vi‘"  EldarMoNames(5,0) = "Enderi"  EldarMoNames(6,0) = "Quell‘"  EldarMoNames(7,0) = "Hr’v‘"  EldarMoNames(8,0) = "Coir‘"  EldarMoNames(9,0) = "Mettar‘"    '(x,1) is Sindarin      '(x,2) is English  EldarMoNames(1,2) = "First Day"  EldarMoNames(2,2) = "Spring"  EldarMoNames(3,2) = "Summer"  EldarMoNames(4,2) = "Autumn"  EldarMoNames(5,2) = "Middle Days"  EldarMoNames(6,2) = "Fading"  EldarMoNames(7,2) = "Winter"  EldarMoNames(8,2) = "Stirring"  EldarMoNames(9,2) = "Last Day"      'Beginnings of months in non-leap year  EldarMoStarts(1,0) = 1  EldarMoStarts(2,0) = 2  EldarMoStarts(3,0) = 56  EldarMoStarts(4,0) = 128  EldarMoStarts(5,0) = 182  EldarMoStarts(6,0) = 185  EldarMoStarts(7,0) = 239  EldarMoStarts(8,0) = 311  EldarMoStarts(9,0) = 365      'Calculate leap year month starts  For i = 1 to 9    If i > 5 then      EldarMoStarts(i,1) = EldarMoStarts(i,0) + 3    else      EldarMoStarts(i,1) = EldarMoStarts(i,0)    end if  next    EldarWeekdays(0,0) = "Elenya"  EldarWeekdays(1,0) = "Anarya"  EldarWeekdays(2,0) = "Isilya"  EldarWeekdays(3,0) = "Alduya"  EldarWeekdays(4,0) = "Menelya"  EldarWeekdays(5,0) = "Valanya"  End SubManyMoonsModule.ShireDateFromGregDate:Function ShireDateFromGregDate(GregMonth as Integer, GregDay as Integer, GregYear as Integer) As String  dim SRMo, SRDay, SRYear, LeapFlag as integer  dim MoName as string  dim DayOfSRMonth as integer  dim GregLeapYear, SRLeapYear, OmitWeekday as boolean  dim SpecialDay, YearStr, Weekday, WeekdayStr as string  dim PseudoJulian as integer    SpecialDay=""  OmitWeekday = false    PseudoJulian = GregPJDFromGregDate(GregMonth, GregDay, GregYear)  GregLeapYear = GregYearIsLeapYear(GregYear)  SRDay = ShirePJDFromGregPJDAndLeapYear (PseudoJulian, GregLeapYear)    'Hobbit year begins 9 days earlier than ours,  'so adjust stated year accordingly  If SRDay >= 1 and SRDay <= 9 then    SRYear = GregYear + 1  else    SRYear = GregYear  end if    SRLeapYear = GregYearIsLeapYear(SRYear)    If SRLeapYear then    LeapFlag = 1  Else    LeapFlag = 0  End if    Select Case SRDay  Case 1    SpecialDay = "2 Yule"  Case 182    SpecialDay = "1 Lithe"  Case 183    SpecialDay = "Midyear's Day"    OmitWeekday = true  Case 184    if SRLeapYear then      SpecialDay = "Overlithe"      OmitWeekday = true    else      SpecialDay = "2 Lithe"    end if  Case 185    if SRLeapYear then      SpecialDay = "2 Lithe"    end if  Case 365    if not SRLeapYear then      SpecialDay = "1 Yule"    end if  Case 366    if SRLeapYear then      SpecialDay = "1 Yule"    end if  end Select    SRMo = 0  while SRMo < 12    if SRDay >= ShireMoStarts(SRMo+1, LeapFlag) then       SRMo = SRMo + 1    else      Exit    end if  wend    'Now that month has been calculated, calculate the day  if SRMo >= 1 and SRMo <= 12 then    MoName = ShireMoNames(SRMo)    DayOfSRMonth = SRDay - ShireMoStarts(SRMo, LeapFlag) + 1  end if    'Now calculate day of Hobbit week  Weekday = ShireWeekdayFromShirePJDAndLeapYear (SRDay, SRLeapYear)  WeekdayStr = Weekday + ", "        YearStr = str(SRYear) + " S.R."    If SpecialDay = "" Then    Return  (WeekdayStr +  Str(DayOfSRMonth) + " " + MoName + " " + YearStr)  Elseif OmitWeekday Then    Return (SpecialDay + ", " + YearStr)  Else    Return (WeekdayStr + SpecialDay + ", " + YearStr)  End If  End FunctionManyMoonsModule.ShirePJDFromGregPJDAndLeapYear:Function ShirePJDFromGregPJDAndLeapYear(PseudoJulian as Integer, LeapYear as Boolean) As Integer  dim SRDay as integer    SRDay = PseudoJulian + 9    If SRDay > 365 then    If LeapYear then      If SRDay > 366 then        SRDay = SRDay - 366      end if    Else      SRDay = SRDay - 365    End if  End if    Return (SRDay)  End FunctionManyMoonsModule.ShireWeekdayFromShirePJDAndLeapYear:Function ShireWeekdayFromShirePJDAndLeapYear(SRDay as Integer, SRLeapYear as Boolean) As String  dim Weekday, AdjustedSRDay as integer  dim WeekdayName as string    if SRDay > 183 then    If SRLeapYear then      AdjustedSRDay = SRDay - 2 + 6    else      AdjustedSRDay = SRDay - 1 + 6    end if  else    AdjustedSRDay = SRDay + 6  end if    Weekday = AdjustedSRDay mod 7  WeekdayName = ShireWeekdays (Weekday)  Return (WeekdayName)End FunctionManyMoonsModule.GregPJDFromGregDate:Function GregPJDFromGregDate(TheMonth as Integer, TheDay as Integer, TheYear as Integer) As Integer  dim i, Days as integer  dim ActualMoLens(12) as integer    for i = 1 to 12    ActualMoLens(i) = GregMoLens(i)  next    Days = 0    if GregYearIsLeapYear(TheYear) then    ActualMoLens(2) = 29  end if    For i = 1 to TheMonth    Days = Days + ActualMoLens(i-1)  next     Days = Days + TheDay    Return(Days)  End FunctionManyMoonsModule.GregDataInit:Sub GregDataInit()  GregMoLens(0) = 0  GregMoLens(1) = 31  GregMoLens(2) = 28  GregMoLens(3) = 31  GregMoLens(4) = 30  GregMoLens(5) = 31  GregMoLens(6) = 30  GregMoLens(7) = 31  GregMoLens(8) = 31  GregMoLens(9) = 30  GregMoLens(10) = 31  GregMoLens(11) = 30  GregMoLens(12) = 31    GregMoNames(0) = "ERROR!"  GregMoNames(1) = "January"  GregMoNames(2) = "February"  GregMoNames(3) = "March"  GregMoNames(4) = "April"  GregMoNames(5) = "May"  GregMoNames(6) = "June"  GregMoNames(7) = "July"  GregMoNames(8) = "August"  GregMoNames(9) = "September"  GregMoNames(10) = "October"  GregMoNames(11) = "November"  GregMoNames(12) = "December"    GregWeekdays(0) = "Sunday"  GregWeekdays(1) = "Monday"  GregWeekdays(2) = "Tuesday"  GregWeekdays(3) = "Wednesday"  GregWeekdays(4) = "Thursday"  GregWeekdays(5) = "Friday"  GregWeekdays(6) = "Saturday"  End SubManyMoonsModule.ShireDataInit:Sub ShireDataInit()  dim i as integer    ShireMoNames(1) = "Afteryule"  ShireMoNames(2) = "Solmath"  ShireMoNames(3) = "Rethe"  ShireMoNames(4) = "Astron"  ShireMoNames(5) = "Thrimidge"  ShireMoNames(6) = "Forelithe"  ShireMoNames(7) = "Afterlithe"  ShireMoNames(8) = "Wedmath"  ShireMoNames(9) = "Halimath"  ShireMoNames(10) = "Winterfilth"  ShireMoNames(11) = "Blotmath"  ShireMoNames(12) = "Foreyule"    ShireMoStarts(1,0) = 2  ShireMoStarts(2,0) = 32  ShireMoStarts(3,0) = 62  ShireMoStarts(4,0) = 92  ShireMoStarts(5,0) = 122  ShireMoStarts(6,0) = 152  ShireMoStarts(7,0) = 185  ShireMoStarts(8,0) = 215  ShireMoStarts(9,0) = 245  ShireMoStarts(10,0) = 275  ShireMoStarts(11,0) = 305  ShireMoStarts(12,0) = 335    For i = 1 to 12    If i > 6 then      ShireMoStarts(i,1) = ShireMoStarts(i,0) + 1    else      ShireMoStarts(i,1) = ShireMoStarts(i,0)    end if  next    ShireWeekdays(0) = "Sterday"  ShireWeekdays(1) = "Sunday"  ShireWeekdays(2) = "Monday"  ShireWeekdays(3) = "Trewsday"  ShireWeekdays(4) = "Hevensday"  ShireWeekdays(5) = "Mersday"  ShireWeekdays(6) = "Highday"End SubManyMoonsModule.JDNFromGregDate:Function JDNFromGregDate(Month as Integer, Day as Integer, Year as Integer) As Double  Dim a, y, m as integer  Dim JDN as double    a = (14 - Month) \ 12  y = Year + 4800 - a  m = Month + (12*a) - 3    JDN = Day + (153*m+2)\5 + y*365 + y\4 - y\100 + y\400 - 32045    JDN = JDN - 0.5  '(adjust for midnight)    Return (JDN)End FunctionManyMoonsModule.MJDFromJDN:Function MJDFromJDN(JDN as Double) As Double  Dim MJD as double  MJD = JDN - 2400000.5  Return (MJD)End FunctionManyMoonsModule.StardateFromMJDAndLocalSecs:Function StardateFromMJDAndLocalSecs(MJD as Double, SecondsSinceLocalMidnight as Double) As String  Dim TOSStardateEpoch as double  Dim DayDiff, UnitDiff, Unit as double  Dim Stardate as double  Dim UTC_MJD as double  Dim UTCHour as double  Dim Issue as integer  Dim StardateString as string  Dim T as Date    TOSStardateEpoch = 110717.0    UTC_MJD = UTC_MJD_FromMJDAndLocalSecs(MJD,SecondsSinceLocalMidnight)  T= New Date  UTCHour = UTCHourFromLocalHour(T.Hour,T.Minute,T.Second)    'Calculate base stardate (at midnight UTC for this UTC MJD)  DayDiff = UTC_MJD - TOSStardateEpoch  UnitDiff = DayDiff * 5  If DayDiff < 0 then    Stardate = (10000 - abs (UnitDiff mod 10000)) mod 10000  Else    Stardate = (abs (UnitDiff mod 10000)) mod 10000  End if    'Calculate issue of stardate  If UnitDiff > 0 then    Issue = UnitDiff \ 10000  Elseif UnitDiff < 0 then    Issue = (UnitDiff\10000) - 1    If Stardate = 0000 then       'Adjust for boundary conditions      Issue = Issue + 1    End if  Else 'UnitDiff = 0    Issue = 0  End if    'Add on the current stardate unit  @ 5 units/day (TOS)  Unit = (UTCHour / 24) * 5  Unit = Round(Unit * 100)  Unit = Unit / 100  Stardate = Stardate + Unit    If (Issue < 19) Or (Issue = 19 And Stardate < 7340.00) Then    StardateString = "[" + format(Issue,"-####") + "]" + format(Stardate, "0000.00")  Else    StardateString = "UNSUPPORTED"  End If    Return (StardateString)  End FunctionManyMoonsModule.SecsSinceMidnight:Function SecsSinceMidnight(Hour as Integer, Minute as Integer, Second as Integer) As Double  Dim Secs as double  Secs = (Hour*3600) + (Minute*60) + Second  Return (Secs)End FunctionManyMoonsModule.SwatchbeatFromLocalTime:Function SwatchbeatFromLocalTime(Hour as Integer, Minute as Integer, Second as Integer) As Integer  Dim TicksSinceLocalMidnight, TicksSinceMidnightBMT as double  Dim TicksPerBeat, BeatsPerDay, Swatchbeat, SwatchTimezone as integer    SwatchTimezone = AdjTimezone - 1    TicksPerBeat = 5184 '(84.6 seconds, or 1/1000th part of a day)  BeatsPerDay = 1000    TicksSinceLocalMidnight = (216000*Hour)+(3600*Minute)+(60*Second)  TicksSinceMidnightBMT = TicksSinceLocalMidnight - (SwatchTimeZone * 216000)    Swatchbeat = (TicksSinceMidnightBMT / TicksPerBeat) mod BeatsPerDay    Return (Swatchbeat)  End FunctionManyMoonsModule.GregYearFromJDN:Function GregYearFromJDN(JDN as Double) As Integer  Dim RD as double  Dim d0, d1, d2, d3, d4 as integer  Dim n400, n100, n4, n1, Year, Result as integer    RD = JDN - 1721424.5    d0 = RD - 1  n400 = d0 \ 146097  d1 = d0 mod 146097  n100 = d1 \ 36524  d2 = d1 mod 36524  n4 = d2 \ 1461  d3 = d2 mod 1461  n1 = d3 \ 365  d4 = (d3 mod 365) + 1  Year = (400 * n400) + (100 * n100) + (4 * n4) + n1    If (n100 = 4) or (n1 = 4) then    Result = Year  Else    Result = Year + 1  End if    Return (Result)  End FunctionManyMoonsModule.GregYearIsLeapYear:Function GregYearIsLeapYear(InYear as Integer) As Boolean  Dim FourthYrRem, HundredthYrRem, FourHundredthYrRem as double  Dim LeapYear as boolean  Dim GregYear as Integer    'Adjust for current Many Moons dating system, where  'MM Year 0 = 1 BCE and MM Year -3 should be a leap year (4 BCE)  'Of course, the Gregorian calendar doesn't technically  'extend that far back anyway.  If InYear < 0 then     GregYear = InYear - 1  Else    GregYear = InYear  End If    FourthYrRem = GregYear mod 4  HundredthYrRem = GregYear mod 100  FourHundredthYrRem = GregYear mod 400    if FourthYrRem = 0 then    '4th year    LeapYear = True        if HundredthYrRem = 0 then      if FourHundredthYrRem = 0 then        '4th, 100th, and 400th        LeapYear = True      else        '4th, 100th, NOT 400th        LeapYear = False      end if    end if      else     'Not 4th    LeapYear = False  end if    Return (LeapYear)End FunctionManyMoonsModule.Swatch_BMT_MJD:Function Swatch_BMT_MJD(MJD as Double, SecondsSinceLocalMidnight as Double) As Double  Dim SwatchTimezone as integer  Dim LocalHour, BMTHour as double  Dim Swatch_BMT_MJD as double    SwatchTimezone = Timezone - 1    'Calculate what the BMT MJD is for given moment  LocalHour = SecondsSinceLocalMidnight / 3600  BMTHour = LocalHour - SwatchTimezone  If BMTHour >= 24 then    'It's tomorrow in Biel!    Swatch_BMT_MJD = MJD + 1    BMTHour = BMTHour - 24  Elseif BMTHour <= 0 then    'It's yesterday in Biel!    Swatch_BMT_MJD = MJD - 1    BMTHour = BMTHour + 24  Else    Swatch_BMT_MJD = MJD  End if    Return (Swatch_BMT_MJD)  End FunctionManyMoonsModule.JDNFromMJD:Function JDNFromMJD(MJD as Double) As Double  Dim JDN as double  JDN = MJD + 2400000.5  Return (JDN)End FunctionManyMoonsModule.EldarPJDFromGregPJDAndYear:Function EldarPJDFromGregPJDAndYear(PJD as Integer, Year as Integer) As Integer  Dim IPJD as integer    'MsgBox str((Year-1) mod 12)    Select case (Year-1+24000) mod 12      Case 1    'Yestare = PJD 89    IPJD = (PJD - 88) mod 365  Case 2    'Yestare = PJD 89    IPJD = (PJD - 88) mod 365  Case 3    'Yestare = PJD 89    IPJD = (PJD - 88) mod 365      Case 4    'Gregorian leap year #1    'Yestare falls back one day to PJD 88    IPJD = (PJD - 87) mod 366        'Non-leap years  Case 5    IPJD = (PJD - 87) mod 365  Case 6    IPJD = (PJD - 87) mod 365  Case 7    IPJD = (PJD - 87) mod 365      Case 8    'Gregorian leap year #2    'Yestare falls back another day to PJD 87    IPJD = (PJD - 86) mod 366        'Non-leap years  Case 9    IPJD = (PJD - 86) mod 365  Case 10    IPJD = (PJD - 86) mod 365  Case 11    IPJD = (PJD - 86) mod 365      Case 0    'Gregorian leap year # 3    '12th year = Imladris leap year    'Yestare falls back another day to PJD 86        'REVIEW: Remember to implement double endere    'and NO double endere at end of yen    IPJD = (PJD - 85) mod 366      Else    'Error    IPJD = -555      End Select    If IPJD <= 0 then    IPJD = IPJD + 365  End if    Return (IPJD)  End FunctionManyMoonsModule.EldarYearFromGregPJDAndYear:Function EldarYearFromGregPJDAndYear(PJD as Integer, gYear as Integer) As Integer  Dim iYear as integer    iYear = gYear    Select case (gYear-1+24000) mod 12      Case 1    If PJD < 89 then      iYear = gYear - 1    End if  Case 2    If PJD < 89 then      iYear = gYear - 1    End if  Case 3    If PJD < 89 then      iYear = gYear - 1    End if      Case 4    'Yestare falls back one day in year 4    If PJD < 88 then      iYear = gYear - 1    End if  Case 5    If PJD < 88 then      iYear = gYear - 1    End if  Case 6    If PJD < 88 then      iYear = gYear - 1    End if  Case 7    If PJD < 88 then      iYear = gYear - 1    End if      Case 8    'Yestare falls back another day in year 8    If PJD < 87  then      iYear = gYear - 1    End if  Case 9    If PJD < 87  then      iYear = gYear - 1    End if  Case 10    If PJD < 87  then      iYear = gYear - 1    End if  Case 11    If PJD < 87  then      iYear = gYear - 1    End if      Case 0    'Yestare falls back another day in year 12    If PJD < 86 then      iYear = gYear - 1    End if      Else    'Error    iYear = -555      End Select    Return (iYear)  End FunctionManyMoonsModule.EldarDateFromJDN:Function EldarDateFromJDN(JDN as Double) As String  Dim iYear, iPJD, iMonth as integer  Dim Result as String  Dim SpecialDay, MoName, YearStr, WeekdayStr as String  Dim LeapFlag, DayOfImladrisMonth, Weekday as integer  Dim OmitWeekday as Boolean  Dim AdjJDN as double  Dim GregDate as mmDate  Dim PJD as Integer    GregDate = New mmDate  GregDate = GregDateFromJDN(JDN)  PJD = GregPJDFromGregDate(GregDate.Month, GregDate.Day, GregDate.Year)    iYear = EldarYearFromGregPJDAndYear(PJD,GregDate.Year)  iPJD = EldarPJDFromGregPJDAndYear(PJD, GregDate.Year)  AdjJDN = JDN - 0.5    Select Case iPJD  Case 1    SpecialDay = "Yestar‘ (First Day)"  Case 365    SpecialDay = "Mettar‘ (Last Day)"  Else    SpecialDay=""  End Select    'Is it an Imladris leap year?  If (iYear-1) mod 12 = 0 then    LeapFlag = 1  Else    LeapFlag = 0  End if    'Calculate the number of the month  iMonth = 0  while iMonth < 9    if iPJD >= EldarMoStarts(iMonth+1, LeapFlag) then       iMonth = iMonth + 1    else      Exit    end if  wend    MoName = EldarMoNames(iMonth, 0)     DayOfImladrisMonth = iPJD - EldarMoStarts(iMonth, LeapFlag) + 1    'Yestar‘ of Imladris Year 1 should be Elenya, first day of week.  'This is my rule, not Tolkien's, who gave no rule.  'In any case, we don't even know what the "real" Eldarin year is now!  Weekday = ((AdjJDN+4) mod 6)  WeekdayStr = EldarWeekdays(Weekday,0)    YearStr = " " + str(iYear) + ", Calendar of Imladris"    If SpecialDay = "" then    Result = WeekdayStr + ", " + str(DayOfImladrisMonth) + " " + MoName + YearStr  Else    Result = WeekdayStr + ", " + SpecialDay + YearStr  End If    Return(Result)  End FunctionManyMoonsModule.WorldCalDataInit:Sub WorldCalDataInit()  Dim i, j as Integer    WorldCalMoLens(0,0) = 0  WorldCalMoLens(1,0) = 31  WorldCalMoLens(2,0) = 30  WorldCalMoLens(3,0) = 30  WorldCalMoLens(4,0) = 31  WorldCalMoLens(5,0) = 30  WorldCalMoLens(6,0) = 30  WorldCalMoLens(7,0) = 0  WorldCalMoLens(8,0) = 31  WorldCalMoLens(9,0) = 30  WorldCalMoLens(10,0) = 30  WorldCalMoLens(11,0) = 31  WorldCalMoLens(12,0) = 30  WorldCalMoLens(13,0) = 30  WorldCalMoLens(14,0) = 1    For i = 1 to 14    WorldCalMoLens(i,1) = WorldCalMoLens(i,0)  Next    'Leap-year Day, W, 31 June  WorldCalMoLens(7,1) = 1    WorldCalMoNames(1) = "January"  WorldCalMoNames(2) = "February"  WorldCalMoNames(3) = "March"  WorldCalMoNames(4) = "April"  WorldCalMoNames(5) = "May"  WorldCalMoNames(6) = "June"  WorldCalMoNames(7) = "Leapyear Day"  WorldCalMoNames(8) = "July"  WorldCalMoNames(9) = "August"  WorldCalMoNames(10) = "September  WorldCalMoNames(11) = "October"  WorldCalMoNames(12) = "November"  WorldCalMoNames(13) = "December"  WorldCalMoNames(14) = "World Day"    WorldCalWeekdays(0) = "Sunday"  WorldCalWeekdays(1) = "Monday"  WorldCalWeekdays(2) = "Tuesday"  WorldCalWeekdays(3) = "Wednesday"  WorldCalWeekdays(4) = "Thursday"  WorldCalWeekdays(5) = "Friday"  WorldCalWeekdays(6) = "Saturday"  End SubManyMoonsModule.WorldCalDateFromGregPJDAndYear:Function WorldCalDateFromGregPJDAndYear(PJD as Integer, Year as Integer) As String  Dim m, LeapFlag, i, PrevDays, NextMonthStart, DayOfMonth, AdjustedPJD as Integer  Dim Weekday as Integer  Dim WeekdayName, SpecialDay, MonthName, WorldCalDateStr as String    SpecialDay = ""    If GregYearIsLeapYear(Year) Then    LeapFlag = 1  Else    LeapFlag = 0  End If    'Calculate the number of the month  m = 0  NextMonthStart = 1  while m < 14    NextMonthStart = NextMonthStart + WorldCalMoLens(m,LeapFlag)    if PJD >= NextMonthStart then       m = m + 1    else      Exit    end if  wend    For i = 1 To m    PrevDays = PrevDays + WorldCalMoLens(i-1,LeapFlag)  Next  DayOfMonth = PJD - PrevDays    MonthName = WorldCalMoNames(m)    'Calculate WorldCal weekday  AdjustedPJD = PJD  If LeapFlag = 1 Then    If PJD = 183 Then      SpecialDay = "W, Leapyear Day"    ElseIf PJD > 183 Then       AdjustedPJD = PJD - 1    End If  End If    Weekday = (AdjustedPJD-1) mod 7    If AdjustedPJD = 365 Then    SpecialDay = "W, World Day"  Else    WeekdayName = WorldCalWeekdays(Weekday)  End If    If SpecialDay = "" Then    WorldCalDateStr = WeekdayName + ", " + str(DayOfMonth) + " " + MonthName + " " + GregYearName(Year)  Else    WorldCalDateStr = SpecialDay + ", " + GregYearName(Year)  End If    Return(WorldCalDateStr)End FunctionManyMoonsModule.GregYearName:Function GregYearName(InYear as Integer) As String  Dim OutYear as Integer  Dim BCEFlag as Boolean  Dim Result as String    If InYear <= 0 Then    OutYear = -(InYear - 1)    BCEFlag = True  Else    OutYear = InYear    BCEFlag = False  End If    If BCEFlag then    Result = str(OutYear) + " B.C.E."  Else    Result = str(OutYear) + " C.E."  End if    Return(Result)  End FunctionManyMoonsModule.ReadPrefs:Sub ReadPrefs()  Dim folder,file As FolderItem  Dim path As String  Dim PrefsFile As TextInputStream  Dim AllPrefs, Comma as String    ReadLocationPrefs    Comma = ","    folder=PreferencesFolder  path=folder.AbsolutePath+"Many Moons Preferences"  file=GetFolderItem(path)    If Not(File.Exists) Then    'Prefs file doesn't exist, so create one    MakeDefaultPrefs  Else    'Prefs file exists, so open file and read the preferences        PrefsFile=file.OpenAsTextFile    AllPrefs=PrefsFile.ReadAll    PrefsFile.Close        //TimezoneStr = NthField(AllPrefs,Comma,1)    GregStr = NthField(AllPrefs,Comma,2)    WCStr = NthField(AllPrefs,Comma,3)    SwatchStr = NthField(AllPrefs,Comma,4)    ShireStr = NthField(AllPrefs,Comma,5)    EldarinStr = NthField(AllPrefs,Comma,6)    StardateStr = NthField(AllPrefs,Comma,7)    //DST_Str = NthField(AllPrefs,Comma,8)    DiscoStr = NthField(AllPrefs,Comma,9)    IllumStr = NthField(AllPrefs,Comma,10)    BahaiStr = NthField(AllPrefs,Comma,11)      End If  End SubManyMoonsModule.MakeDefaultPrefs:Sub MakeDefaultPrefs()  Dim folder,file As FolderItem  Dim path As String  Dim PrefsFile As TextOutputStream  Dim AllPrefs as String    GregStr="1"  WCStr="1"  SwatchStr="1"  ShireStr="1"  EldarinStr="1"  StardateStr="1"    DiscoStr="1"  IllumStr="1"  BahaiStr="1"    AllPrefs = "<obsolete>,1,1,1,1,1,1,<obsolete>,1,1,1"    folder=PreferencesFolder  path=folder.AbsolutePath+"Many Moons Preferences"  file=GetFolderItem(path)    PrefsFile=file.CreateTextFile  PrefsFile.Write(AllPrefs)  File.MacCreator = "cbMM"  File.MacType = "pref"  PrefsFile.Close    End SubManyMoonsModule.AdjustPrefsWindow:Sub AdjustPrefsWindow()    If GregStr="1" Then    PrefsWin.GregBox.Value = True  Else    PrefsWin.GregBox.Value = False  End If    If WCStr="1" Then    PrefsWin.WCBox.Value = True  Else    PrefsWin.WCBox.Value = False  End If    If SwatchStr="1" Then    PrefsWin.SwatchBox.Value = True  Else    PrefsWin.SwatchBox.Value = False  End If    If ShireStr="1" Then    PrefsWin.ShireBox.Value = True  Else    PrefsWin.ShireBox.Value = False  End If    If EldarinStr="1" Then    PrefsWin.EldarBox.Value = True  Else    PrefsWin.EldarBox.Value = False  End If    If StardateStr="1" Then    PrefsWin.StardateBox.Value = True  Else    PrefsWin.StardateBox.Value = False  End If    If DiscoStr="1" Then    PrefsWin.DiscoBox.Value = True  Else    PrefsWin.DiscoBox.Value = False  End If    If IllumStr="1" Then    PrefsWin.IllumBox.Value = True  Else    PrefsWin.IllumBox.Value = False  End If    If BahaiStr="1" Then    PrefsWin.BahaiBox.Value = True  Else    PrefsWin.BahaiBox.Value = False  End If  End SubManyMoonsModule.WritePrefs:Sub WritePrefs()  Dim folder,file As FolderItem  Dim path As String  Dim PrefsFile As TextOutputStream  Dim AllPrefs, Comma as String    AllPrefs = "<obsolete>" + "," + GregStr + "," + WCStr + "," + SwatchStr + ","  AllPrefs = AllPrefs + ShireStr + "," + EldarinStr + "," + StardateStr + "," + "<obsolete>" + "," + DiscoStr  AllPrefs = AllPrefs+","+IllumStr+","+BahaiStr    folder=PreferencesFolder  path=folder.AbsolutePath+"Many Moons Preferences"  file=GetFolderItem(path)  File.Delete    PrefsFile=file.CreateTextFile  PrefsFile.Write(AllPrefs)  File.MacType = "pref"  File.MacCreator = "cbMM"  PrefsFile.CloseEnd SubManyMoonsModule.GregDateString:Function GregDateString(GregMonth as Integer, GregDay as Integer, GregYear as Integer) As String  Dim MonthName, WeekdayName, GregStr as String  Dim JDN as Double  Dim Weekday as Integer    MonthName = GregMoNames(GregMonth)    JDN = JDNFromGregDate(GregMonth,GregDay,GregYear)  Weekday = GregWeekdayFromJDN(JDN)  WeekdayName = GregWeekdays(Weekday)    GregStr = WeekdayName + ", " + str(GregDay) + " " + MonthName + " "  GregStr = GregStr + GregYearName(GregYear)  Return(GregStr)  End FunctionManyMoonsModule.GregDateIsValid:Function GregDateIsValid(GregMonth as Integer, GregDay as Integer, GregYear as Integer) As Boolean  Dim MonthLen as Integer  Dim JDN as Double  Dim OKStatus as Boolean    OKStatus = True    If GregMonth < 1 Or GregMonth > 12 Then    OKStatus = False  Else    MonthLen = GregMoLens(GregMonth)    If GregMonth = 2 and GregYearIsLeapYear(GregYear) Then      MonthLen = 29    End If  End If    If (GregDay > MonthLen) Then    OKStatus = False  End If    If OKStatus = True Then    JDN = JDNFromGregDate(GregMonth, GregDay, GregYear)    If JDN < 0 Then      OKStatus = False    End If  End If    Return(OKStatus)  End FunctionManyMoonsModule.AdjustTimezoneForDST:Function AdjustTimezoneForDST() As Integer  Dim Result as Integer  If DST Then    Result = Timezone '+ 1  Else    Result = Timezone   End If  Return(Result)End FunctionManyMoonsModule.GregDateFromJDN:Function GregDateFromJDN(JDN as Double) As MMDate  Dim q, n, x, d, m, y as Double  Dim OutDate as mmDate  Dim AdjustedJDN as Double  Dim Weekday as Integer  Dim GregStr as String    OutDate = new mmDate    q = floor (JDN + 0.5) + 68569.0  n = (4 * q \ 146097)  q = q - ((146097 * n + 3) \ 4)  x = (4000 * (q + 1) \ 1461001.0)  q = q - (1461 * x \ 4) + 31  m = (80 * q \ 2447)  d = q - (2447 * m \ 80)  q = (m \ 11)  m = m + 2 - 12 * q  y = 100 * (n - 49) + x + q    AdjustedJDN = JDN - 0.5  Weekday = (AdjustedJDN+2) mod 7    OutDate.Year = y  OutDate.Month =  m  OutDate.Day = d  OutDate.Weekday = Weekday  OutDate.Calendar = "Gregorian"    'GregStr = GregDateString(OutDate.Month,OutDate.Day,OutDate.Year)  'msgbox GregStr      Return(OutDate)  End FunctionManyMoonsModule.DiscoDateFromJDN:Function DiscoDateFromJDN(JDN as Double) As MMDate  Dim m, LeapFlag, i, PrevDays, NextMonthStart, DayOfMonth as Integer  Dim dYear, dPJD, AdjustedPJD as Integer  Dim Weekday as Integer  Dim SpecialDay as String  Dim g, DiscoDate as mmDate    DiscoDate = New mmDate  SpecialDay = ""  PrevDays = 0    g = New mmDate  g = GregDateFromJDN(JDN)  dPJD = GregPJDFromGregDate(g.Month, g.Day, g.Year)    If GregYearIsLeapYear(g.Year) Then    LeapFlag = 1  Else    LeapFlag = 0  End If    'Calculate the weekday.   'We do this first because St. Tib's Day falls in the middle of a month,  'and screws everything up. Hail Fuckin' Eris! Eep!  AdjustedPJD = dPJD  If LeapFlag = 1 Then    If dPJD = 60 Then      SpecialDay = "St. Tib's Day"    ElseIf dPJD > 60 Then      AdjustedPJD = dPJD - 1    End If  End If  Weekday = (AdjustedPJD-1) mod 5    'Calculate what season it is. Chaos is counted as having 74 days   '(including St. Tib's) in leap years.  m = 0  NextMonthStart = 1  While m < 5    NextMonthStart = NextMonthStart + DiscoMoLens(m,LeapFlag)    If AdjustedPJD >= NextMonthStart Then      m = m + 1    Else      Exit    End If  Wend    'Calculate the day of the month.  'We force the calculation to use non-leapyear months,  'because we're already using an Adjusted PJD.  For i = 1 To m    PrevDays = PrevDays + DiscoMoLens(i-1,0)  Next  DayOfMonth = AdjustedPJD - PrevDays    dYear = g.Year + 1166    DiscoDate.Month = m  DiscoDate.Day = DayOfMonth  DiscoDate.Year = dYear  DiscoDate.Weekday = Weekday  DiscoDate.SpecialDay = SpecialDay  DiscoDate.Calendar = "Discordian"        Return (DiscoDate)  End FunctionManyMoonsModule.DiscoDateString:Function DiscoDateString(DiscoDate as MMDate) As String  Dim SeasonStr, WeekdayStr, YearStr, Holyday, OutStr as String    SeasonStr = DiscoMoNames(DiscoDate.Month)  WeekdayStr = DiscoWeekdays(DiscoDate.Weekday)  YearStr = str(DiscoDate.Year) + " P.O.E.E."    If DiscoDate.Day = 5 Then    Holyday = DiscoApostleHolydays(DiscoDate.Month)  ElseIf DiscoDate.Day = 50 Then    Holyday = DiscoSeasonHolydays(DiscoDate.Month)  Else    Holyday = ""  End If    If DiscoDate.SpecialDay <> "" Then    OutStr = DiscoDate.SpecialDay + ", " + YearStr  ElseIf Holyday <> "" Then    OutStr = Holyday + ", " + WeekdayStr + ", " + str(DiscoDate.Day) +" "+ SeasonStr + " " + YearStr  Else    OutStr = WeekdayStr + ", " + str(DiscoDate.Day) +" "+ SeasonStr + " " + YearStr  End If    Return(OutStr)  End FunctionManyMoonsModule.DiscoDataInit:Sub DiscoDataInit()  Dim i, j as Integer    DiscoMoNames(1) = "Chaos"  DiscoMoNames(2) = "Discord"  DiscoMoNames(3) = "Confusion"  DiscoMoNames(4) = "Bureaucracy"  DiscoMoNames(5) = "Aftermath (International Relations)"    DiscoWeekdays(0) = "Sweetmorn"  DiscoWeekdays(1) = "Boomtime"  DiscoWeekdays(2) = "Pungenday"  DiscoWeekdays(3) = "Prickle-Prickle"  DiscoWeekdays(4) = "Setting Orange"        DiscoApostleHolydays(1) = "Mungday"  DiscoApostleHolydays(2) = "Mojoday"  DiscoApostleHolydays(3) = "Syaday"  DiscoApostleHolydays(4) = "Zaraday"  DiscoApostleHolydays(5) = "Maladay"    DiscoSeasonHolydays(1) = "Chaoflux"  DiscoSeasonHolydays(2) = "Discoflux"  DiscoSeasonHolydays(3) = "Confuflux"  DiscoSeasonHolydays(4) = "Bureflux"  DiscoSeasonHolydays(5) = "Afflux"    For i = 1 To 5    For j = 0 To 1      DiscoMoLens(i,j) = 73    Next  Next    'Account for St. Tib's Day in leapyears  DiscoMoLens(1,1) = 74  End SubManyMoonsModule.Show_mmDate:Sub Show_mmDate(D as MMDate)  Dim Result as String    Result = D.Calendar + ": "  Result = Result + str(D.Day) + "/" + str(D.Month) + "/" + str(D.Year)  Result = Result + " (weekday=" + str(D.Weekday) + ", Special="+D.SpecialDay+","  Result = Result + " C1="+str(D.Cycle1)+", C2="+str(D.Cycle2)+", C3="+str(D.Cycle3)+")"  Result = Result + " " + Format(D.Hour,"00")+":"+Format(D.Minute,"00")+":"+Format(D.Second,"00")    msgbox Result  End SubManyMoonsModule.BahaiDataInit:Sub BahaiDataInit()  Dim i as Integer    '(x,0) are Arabic names  BahaiDayNames(1,0) = "Bah‡"  BahaiDayNames(2,0) = "Jal‡l"  BahaiDayNames(3,0) = "Jam‡l"  BahaiDayNames(4,0) = "'Azamat"  BahaiDayNames(5,0) = "Nœr"  BahaiDayNames(6,0) = "Rahmat"  BahaiDayNames(7,0) = "Kalim‡t"  BahaiDayNames(8,0) = "Kam‡l"  BahaiDayNames(9,0) = "Asm‡'"  BahaiDayNames(10,0) = "'Izzat"  BahaiDayNames(11,0) = "Mash’yyat"  BahaiDayNames(12,0) = "'Ilm"  BahaiDayNames(13,0) = "Qudrat"  BahaiDayNames(14,0) = "Qawl"  BahaiDayNames(15,0) = "Mas‡il"  BahaiDayNames(16,0) = "Sharaf"  BahaiDayNames(17,0) = "Sult‡n"  BahaiDayNames(18,0) = "Mulk"  BahaiDayNames(19,0) = "'Al‡"    'Months are named same as days and are all 19 days long  For i = 1 To 18    BahaiMoNames(i,0) = BahaiDayNames(i,0)    BahaiMoLens(i,0) = 19    BahaiMoLens(i,1) = 19  Next    'Intercalary Period, which lengthens in leapyears  BahaiMoNames(19,0) = "Ayy‡m-i-H‡"  BahaiMoLens(19,0) = 4  BahaiMoLens(19,1) = 5    'Our month #20 is officially Baha'i month #19;  'Intercalary Period does not count as official month  BahaiMoNames(20,0) = BahaiDayNames(19,0)  BahaiMoLens(20,0) = 19  BahaiMoLens(20,1) = 19    BahaiWeekdays(0,0) = "Jal‡l"  BahaiWeekdays(1,0) = "Jam‡l"  BahaiWeekdays(2,0) = "Kam‡l"  BahaiWeekdays(3,0) = "Fid‡l"  BahaiWeekdays(4,0) = "'Id‡l"  BahaiWeekdays(5,0) = "Istijl‡l"  BahaiWeekdays(6,0) = "Istiql‡l"    BahaiYearNames(1,0) = "Alif"  BahaiYearNames(2,0) = "B‡'"  BahaiYearNames(3,0) = "Ab"  BahaiYearNames(4,0) = "D‡l"  BahaiYearNames(5,0) = "B‡b"  BahaiYearNames(6,0) = "V‡v"  BahaiYearNames(7,0) = "Abad"  BahaiYearNames(8,0) = "J‡d"  BahaiYearNames(9,0) = "Bah‡"  BahaiYearNames(10,0) = "Hubb"  BahaiYearNames(11,0) = "Bahh‡j"  BahaiYearNames(12,0) = "Jav‡b"  BahaiYearNames(13,0) = "Ahad"  BahaiYearNames(14,0) = "Vahh‡b"  BahaiYearNames(15,0) = "Vid‡d"  BahaiYearNames(16,0) = "Bad’'"  BahaiYearNames(17,0) = "Bah’"  BahaiYearNames(18,0) = "Abh‡"  BahaiYearNames(19,0) = "V‡hid"  End SubManyMoonsModule.BahaiDateFromJDN:Function BahaiDateFromJDN(JDN as Double) As mmDate  Dim m, LeapFlag, i, PrevDays, NextMonthStart, DayOfMonth as Integer  Dim BahaiYear, BahaiPJD, AdjustedPJD as Integer  Dim Weekday as Integer  Dim sd as String  Dim G, B, Jan1st, WRD_Date as mmDate  Dim GregPJD as Integer  Dim JD, WRD_JDN as Double  Dim Vahid, Kull_i_Shay, YearNum, gm, gd as Integer  Dim gLeap, bLeap as Boolean    B = new mmDate    G = new mmDate  G = GregDateFromJDN(JDN)    'Show_mmDate(G)    GregPJD = GregPJDFromGregDate(G.Month, G.Day, G.Year)    BahaiYear = G.Year - 1843    gLeap = GregYearIsLeapYear(G.Year)  bLeap = BahaiYearIsLeapYear(BahaiYear)    If G.Month < 3 Then    BahaiYear = BahaiYear - 1  ElseIf G.Month = 3 And G.Day < 21 Then    BahaiYear = BahaiYear - 1  End If    gm = G.Month  gd = G.Day    //-------------------------------------  'Baha'i year starts on our March 21, the Baha'i "spring equinox observed".  'This is PJD 81 in leapyears and 80 in non-leapyears.  'Calculate the day of the Baha'i year:    If gLeap Then    BahaiPJD = (GregPJD-80+366) Mod 366  Else    BahaiPJD = (GregPJD-79+365) Mod 365  End If    If gLeap Then    If BahaiPJD = 0 Then      BahaiPJD = 366    End If  Else    If BahaiPJD = 0 Then      BahaiPJD = 365    End If  End If    //-------------------------------------  'Calculate what month it is.    If gLeap Then    LeapFlag = 1  Else    LeapFlag = 0  End If    m = 0  NextMonthStart = 1  While m < 20    NextMonthStart = NextMonthStart + BahaiMoLens(m,LeapFlag)    If BahaiPJD >= NextMonthStart Then      m = m + 1    Else      Exit    End If  Wend      'Calculate the day of the month.  PrevDays = 0  For i = 1 To m    PrevDays = PrevDays + BahaiMoLens(i-1,LeapFlag)  Next  DayOfMonth = BahaiPJD - PrevDays    Weekday = (JDN+3) mod 7    Kull_i_Shay = ((BahaiYear-1)\361) + 1    Vahid = (((BahaiYear-1) \ 19) + 1) mod 19  If Vahid = 0 Then    Vahid = 19  End If    YearNum = BahaiYear mod 19  If YearNum = 0 Then    YearNum = 19  End If    //------ Days of Observance ------------    If gd = 21 and gm = 3 Then    sd = "The Feast of Naw Ruz (New Year)"  ElseIf gd = 21 And gm = 4 Then    sd = "First day of the Feast of Ridvan"  ElseIf gd = 22 And gm = 4 Then    sd = "Second day of the Feast of Ridvan"  ElseIf gd = 23 And gm = 4 Then    sd = "Third day of the Feast of Ridvan"  ElseIf gd = 24 And gm = 4 Then    sd = "Fourth day of the Feast of Ridvan"  ElseIf gd = 25 And gm = 4 Then    sd = "Fifth day of the Feast of Ridvan"  ElseIf gd = 26 And gm = 4 Then    sd = "Sixth day of the Feast of Ridvan"  ElseIf gd = 27 And gm = 4 Then    sd = "Seventh day of the Feast of Ridvan"  ElseIf gd = 28 And gm = 4 Then    sd = "Eighth day of the Feast of Ridvan"  ElseIf gd = 29 And gm = 4 Then    sd = "Ninth day of the Feast of Ridvan"  ElseIf gd = 30 And gm = 4 Then    sd = "Tenth day of the Feast of Ridvan"  ElseIf gd = 1 And gm = 5 Then    sd = "Eleventh day of the Feast of Ridvan"  ElseIf gd = 2 And gm = 5 Then    sd = "Twelfth day of the Feast of Ridvan"  ElseIf gd = 23 And gm = 5 Then    sd = "Declaration of the B‡b"  ElseIf gd = 29 And gm = 5 Then    sd = "Ascension of Bah‡'u'll‡h"  ElseIf gd = 9 and gm = 7 Then    sd = "Martyrdom of the B‡b"  ElseIf gd = 20 and gm = 10 Then    sd = "Birth of the B‡b"  ElseIf gd = 12 And gm = 11 Then    sd = "Birth of Bah‡'u'll‡h"  ElseIf gd = 26 And gm = 11 Then    sd = "Day of the Covenant"  ElseIf gd = 28 And gm = 11 Then    sd = "Ascension of 'Abdu'l-Bah‡"  ElseIf gd = 11 And gm = 6 Then    sd = "Race Unity Day"  ElseIf gd = 19 And gm = 9 Then    sd = "International Day of Peace"  ElseIf gd = 2 and gm = 10 Then    sd = "Universal Children's Day"  ElseIf gd = 24 And gm = 10 Then    sd = "United Nations Day"  ElseIf gd = 10 And gm = 12 Then    sd = "United Nations Human Rights Day"  End If    'World Religion Day, 3rd Sunday in January    Jan1st = New mmDate  Jan1st = MakeDate(1,1,G.Year)    WRD_JDN = GregNthWeekdayFromDate(3,0,Jan1st)  WRD_Date = New mmDate  WRD_Date = GregDateFromJDN(WRD_JDN)    'Show_mmDate(WRD_Date)    If gd = WRD_Date.Day and gm = WRD_Date.Month Then    sd = "World Religion Day"  End If      //--------------------------------------    B.Day = DayOfMonth  B.Month = m  B.Year = BahaiYear  B.Weekday = Weekday  B.Calendar = "Baha'i"  B.Cycle1 = YearNum  B.Cycle2 = Vahid  B.Cycle3 = Kull_i_Shay  B.SpecialDay = sd    Return(B)  End FunctionManyMoonsModule.BahaiYearIsLeapYear:Function BahaiYearIsLeapYear(BahaiYear as Integer) As Boolean  Dim GregYear as Integer    GregYear = BahaiYear + 1844    If GregYearIsLeapYear(GregYear) Then    Return(True)  Else    Return(False)  End If  End FunctionManyMoonsModule.BahaiDateString:Function BahaiDateString(B as mmDate) As String  Dim MoStr,DayStr,WeekdayStr,YearStr,Result as String  Dim VahidStr, Kull_i_Shay_Str, YearNameStr as String  Dim Proleptic as Boolean    MoStr = BahaiMoNames(B.Month,0)  DayStr = "the day " + BahaiDayNames(B.Day,0) + ", " + str(B.Day)  WeekdayStr = BahaiWeekdays(B.Weekday,0)  YearStr = str(B.Year) + " B.E."    If B.Year < 1 Then    Proleptic = True  Else    Proleptic = False  End If    If Proleptic Then    Result = "The weekday " + WeekdayStr+", "+DayStr+" "+MoStr+" "+YearStr  Else    YearNameStr = BahaiYearNames(B.Cycle1,0)+", "+OrdinalFromCardinal(B.Cycle1)+" year of the "    VahidStr = OrdinalFromCardinal(B.Cycle2) + " Vahid of the "    Kull_i_Shay_Str = OrdinalFromCardinal(B.Cycle3) + " Kull'i'Shay"    Result = "The weekday " + WeekdayStr+", "+DayStr+" "+MoStr+" "+YearStr    Result = Result + " (" + YearNameStr + VahidStr + Kull_i_Shay_Str + ")"  End If    If B.SpecialDay <> "" Then    Result = B.SpecialDay + " -- " + Result  End If    Return(Result)  End FunctionManyMoonsModule.OrdinalFromCardinal:Function OrdinalFromCardinal(Cardinal as Double) As String  Dim CardStr, RightTwoDigits, S, OrdStr as String  Dim C, Digit as Integer    CardStr = "0"+str(Floor(Cardinal))  RightTwoDigits = Right(CardStr,2)  C = Val(CardStr)    If C >= 11 And C < 20 Then    S = "th"  Else     Digit = C mod 10    Select Case Digit    Case 1      S = "st"    Case 2      S = "nd"    Case 3      S = "rd"    Else      S = "th"    End Select  End If    OrdStr = Str(Cardinal) + S    Return(OrdStr)  End FunctionManyMoonsModule.IllumDateString:Function IllumDateString(DiscoDate as mmDate) As String  Dim SeasonStr, YearStr, OutStr as String  Dim GregYear, IllumYear as Integer    GregYear = DiscoDate.Year - 1166  IllumYear = GregYear + 4000  YearStr = str(IllumYear) + " A.L."    SeasonStr = IllumMoNames(DiscoDate.Month)      If DiscoDate.SpecialDay <> "" Then    OutStr = "Heiligefliegendekinderscheissetag, " + YearStr  Else    OutStr = str(DiscoDate.Day) + " " + SeasonStr + " " + YearStr  End If    Return(OutStr)End FunctionManyMoonsModule.IllumDataInit:Sub IllumDataInit()  IllumMoNames(1) = "Verwirrung"  IllumMoNames(2) = "Zweitracht"  IllumMoNames(3) = "Unordnung"  IllumMoNames(4) = "Beamtennherrschaft"  IllumMoNames(5) = "Realpolitik"End SubManyMoonsModule.MakeDate:Function MakeDate(Day as Integer, Month as Integer, Year as Integer) As mmDate  Dim NewDate as mmDate    NewDate = New mmDate    NewDate.Day = Day  NewDate.Month = Month  NewDate.Year = Year    Return(NewDate)  End FunctionManyMoonsModule.GregNthWeekdayFromDate:Function GregNthWeekdayFromDate(N as Integer, Weekday as Integer, TheDate as mmDate) As Double  Dim JDN, Result as Double    'Returns JDN of the Nth weekday (specified by Weekday)  'before/after the Gregorian date TheDate.  'If N >= 0 then return Nth weekday AFTER (not on or after) TheDate.  'If N < 0 then return Nth weekday BEFORE (not on or before) TheDate.    'Cribbed from Dershowitz and Reingold, along with companion fns.  'Note that there seems to be an off-by-one bug in D&R.    JDN = JDNFromGregDate(TheDate.Month,TheDate.Day,TheDate.Year)    If N < 0 Then    Result = ((N+1)*7) + GregWeekdayBefore(JDN,Weekday)  Else    Result = ((N-1)*7) + GregWeekdayAfter(JDN,Weekday)  End If    Return (Result)  End FunctionManyMoonsModule.GregWeekdayBefore:Function GregWeekdayBefore(JDN as Double, Weekday as Integer) As Double    Return(GregWeekdayOnOrBefore(JDN-1,Weekday))  End FunctionManyMoonsModule.GregWeekdayAfter:Function GregWeekdayAfter(JDN as Double, Weekday as Integer) As Double  Return(GregWeekdayOnOrBefore(JDN+7,Weekday))End FunctionManyMoonsModule.GregWeekdayOnOrBefore:Function GregWeekdayOnOrBefore(JDN as Double, Weekday as Integer) As Double  Return(JDN - GregWeekdayFromJDN(JDN-Weekday))End FunctionManyMoonsModule.GregWeekdayFromJDN:Function GregWeekdayFromJDN(JDN as Double) As Integer  Dim Weekday as Integer    Weekday = (Floor(JDN+1.5)) mod 7  Return WeekdayEnd FunctionManyMoonsModule.ReadLocationPrefs:Sub ReadLocationPrefs()  Dim DstStr as String    Latitude = ReadLatitude  Longitude = ReadLongitude    Timezone = ReadGMTDelta  'Timezone = -7  DST = ReadDST  AdjTimeZone = AdjustTimezoneForDST  AdjTimeZoneInMicroSecs = AdjTimezone * 60 * 60 * 1000000  End SubManyMoonsModule.Signum:Function Signum(Num as Double) As Integer  If Num > 0 Then    Return 1  ElseIf Num < 0 Then    Return -1  Else    Return 0  End IfEnd FunctionManyMoonsModule.RealMod:Function RealMod(A as Double, B as Double) As Double  Dim C as Integer    C = A \ B    Return A - B*CEnd FunctionManyMoonsModule.HMSTimeFromDecimalTime:Function HMSTimeFromDecimalTime(DecimalTime as Double) As mmDate  Dim HMSTime as mmDate  Dim Hour, Minute, Second as Integer  Dim FracPart, DecimalMinute as Double    HMSTime = New mmDate    Hour = Floor(DecimalTime)    FracPart = DecimalTime - Hour    DecimalMinute = FracPart*60    Minute = Floor(DecimalMinute)    FracPart = DecimalMinute - Minute    Second = Round(FracPart*60)    HMSTime.Hour = Hour  HMSTime.Minute = Minute  HMSTime.Second = Second    Return HMSTime  End FunctionManyMoonsModule.MakeTime:Function MakeTime(Hour as Integer, Minute as Integer, Second as Integer) As mmDate  Dim NewDate as mmDate    NewDate = New mmDate    NewDate.Hour = Hour  NewDate.Minute = Minute  NewDate.Second = Second    Return(NewDate)  End FunctionManyMoonsModule.DecimalTimeFromHMSTime:Function DecimalTimeFromHMSTime(HMSTime as mmDate) As Double    Return HMSTime.Hour + HMSTime.Minute/60 + HMSTime.Second/3600  End FunctionManyMoonsModule.DayFracFromDecimalTime:Function DayFracFromDecimalTime(DecimalTime as Double) As Double  Return DecimalTime/24.00End FunctionManyMoonsModule.DecimalTimeFromDayFrac:Function DecimalTimeFromDayFrac(DayFrac as Double) As Double  Return DayFrac*24.00End FunctionManyMoonsModule.AfterSunsetNow:Function AfterSunsetNow() As Boolean  Dim G as Date  Dim CurHMSTime, SunsetHMSTime as mmDate  Dim CurDecimalTime, SunsetDecimalTime, JDN as Double  Dim AfterSunset as Boolean  Dim AdjHour as Integer    G = New Date  CurHMSTime = New mmDate  JDN = JDNFromGregDate(G.Month, G.Day, G.Year)    If DST Then    AdjHour = G.Hour - 1  Else    AdjHour = G.Hour  End If    CurHMSTime = MakeTime(AdjHour,G.Minute,G.Second)  CurDecimalTime = DecimalTimeFromHMSTime(CurHMSTime)    SunsetDecimalTime = SunsetFromJDN(JDN)    'Round off sunset time to nearest minute  SunsetHMSTime = New mmDate  SunsetHMSTime = RoundHMSTime(HMSTimeFromDecimalTime(SunsetDecimalTime))  SunsetDecimalTime = DecimalTimeFromHMSTime(SunsetHMSTime)    If CurDecimalTime >= SunsetDecimalTime Then    AfterSunset = True  Else    AfterSunset = False  End If    Return AfterSunset  End FunctionManyMoonsModule.TimeString:Function TimeString(T as mmDate) As String    Return Format(T.Hour,"00")+":"+Format(T.Minute,"00")+":"+Format(T.Second,"00")+" (UTC "+Format(Timezone,"+00")+")"  End FunctionManyMoonsModule.TimestampFromJDN:Function TimestampFromJDN(JDN as Double) As String  Dim PJD, ShirePJD, GregYear, GregMonth, GregDay as integer  Dim Txt, Stardate as String  Dim LeapYear as boolean  Dim MJD, S as double  Dim TheTime as date  Dim GregTS, WorldCalTS, ShireTS, EldarinTS, StardateTS as String  Dim RTN, JDN_TS, MJD_TS, PJD_TS as String  Dim DiscoTS, IllumTS, BahaiTS, SunsetStr as String  Dim BahaiDate, T as mmDate  Dim G as mmDate    RTN = Chr(13)    JDN_TS = "Julian Day Number (JDN): " + format(JDN,"-#########.0#")    T = New mmDate  T = HMSTimeFromDecimalTime(SunsetFromJDN(JDN))  SunsetStr = "Sunset at " + RoundTimeString(T) + " [not adjusted for DST]"    'REVIEW: Sunsets calculated wrong for dates after 12/21 or so (solstice)    G = new mmDate  G = GregDateFromJDN(JDN)    MJD = MJDFromJDN(JDN)  MJD_TS = "Modified JDN (MJD): " + format(MJD,"-#########.0#")    PJD = GregPJDFromGregDate(G.Month, G.Day, G.Year)  PJD_TS = "Pseudo-Julian Day (PJD): " + str(PJD)    GregTS = "Gregorian: " + GregDateString(G.Month,G.Day,G.Year)    WorldCalTS =  "World Calendar: " + WorldCalDateFromGregPJDAndYear(PJD,G.Year)    ShirePJD = ShirePJDFromGregPJDAndLeapYear (PJD, LeapYear)  ShireTS = "Shire Reckoning: " + ShireDateFromGregDate(G.Month, G.Day, G.Year)    EldarinTS = "Eldarin: " + EldarDateFromJDN(JDN) + " [until sunset]"    Stardate = StardateFromMJDAndLocalSecs(MJD, 0)  If Stardate = "UNSUPPORTED" Then    StardateTS = "Stardates currently unsupported later than 26 Jan 2270, 00:00 UTC (Stardate [19]7340.00)."  Else    StardateTS = "Stardate: " + Stardate + " at local midnight"  End If    DiscoTS = "Discordian: " + DiscoDateString(DiscoDateFromJDN(JDN))  IllumTS = "Illuminati: " + IllumDateString(DiscoDateFromJDN(JDN))    BahaiDate = New mmDate  BahaiDate = BahaiDateFromJDN(JDN)  BahaiTS = "Bah‡'’: " + BahaiDateString(BahaiDate) + " [until sunset]"    Txt = JDN_TS + RTN + MJD_TS + RTN + PJD_TS + RTN + SunsetStr + RTN + RTN    If GregStr="1" Then    Txt = Txt + GregTS + RTN  End If    If WCStr="1" Then    Txt = Txt + WorldCalTS + RTN  End If    If ShireStr="1" Then    Txt = Txt + ShireTS + RTN  End If    If EldarinStr="1" Then    Txt = Txt + EldarinTS + RTN  End If    If StardateStr="1" Then    Txt = Txt + StardateTS + RTN  End If    If DiscoStr="1" Then    Txt = Txt + DiscoTS + RTN  End If    If IllumStr="1" Then    Txt = Txt + IllumTS + RTN  End If    If BahaiStr="1" Then    Txt = Txt + BahaiTS + RTN  End If    Return Txt  End FunctionManyMoonsModule.SunsetFromJDN:Function SunsetFromJDN(JDN as Double) As Double  Dim G as mmDate  Dim PJD as Integer  Dim LocalT, Num, Denom, d, LST0, OblEcl, w, M, e, EccAnom, A, B, r, v as Double  Dim SunLong, RA, Dec, MT, h0, HA0, SetTime as Double    G = New mmDate  G = GregDateFromJDN(JDN)    'Calculate time of local midnight  LocalT = 0 - TimeZone  If LocalT > 24 Then    LocalT = LocalT - 24  ElseIf LocalT < 0 Then    LocalT = LocalT + 24  End If    If DST Then    LocalT = LocalT + 1  End If    'Calculate days before 2000-01-00.0  Num = 7*(G.Year + Floor((G.Month+9)/12))  Denom = 4  d = 367*G.Year - Floor(Num/Denom) + Floor(275*G.Month/9) + G.Day - 730530 + LocalT/24    'Local Sidereal Time at 00:00 local time, in degrees  LST0 = 98.9818 + 0.985647352 * d + LocalT*15 + Longitude    'Obliquity of the ecliptic, in degrees  OblEcl = 23.4393 - 0.0000003563 * d    'Argument of perihelion, in degrees  w = 282.9494 + 0.0000470935 * d    'Mean anomaly, in degrees  M = 356.0470 + 0.9856002585 * d    'Eccentricity, in degrees  e = 0.016709 - 0.000000001151 * d    'Eccentric anomaly, in degrees  EccAnom = M + e*(180/Pi) * SinD(M) * (1.0 + e * CosD(M))    'Calculate distance, r (unknown units)  A = CosD(EccAnom) - e  B = Sqrt(1-e*e) * SinD(EccAnom)  r = Sqrt(A*A + B*B)    'True anomaly  v = Atan2D(B,A)    'Sun's true longitude in degrees  SunLong = v + w    'Calculate the right ascension (RA) in degrees  Num = SinD(SunLong) * CosD(OblEcl)  Denom = CosD(SunLong)  RA = Atan2D(Num,Denom)    'Declination, in degrees  Dec = AsinD(SinD(OblEcl) * SinD(SunLong))    'Meridian Time, in degrees  MT = RA - LST0  If MT < 0 Then    MT = MT + 360  End If    'Horizon for Sun's upper limb, in degrees  h0 = -50/60    'Calculate hour angle for sunset in degrees (HA0)  Num = SinD(h0) - SinD(Latitude) * SinD(Dec)  Denom = CosD(Latitude) * CosD(Dec)  HA0 = AcosD(Num/Denom)    'Time of sunset, in degrees  SetTime = Degrees(MT + HA0)  'SetTime = MT + HA0    'Convert from degrees to hours  SetTime = SetTime/15    'msgbox Str(SetTime)    Return SetTime  End FunctionManyMoonsModule.RoundTimeString:Function RoundTimeString(T as mmDate) As String  Dim h, m as Integer  Dim Result as String    If T.Second >= 30 Then    m = T.Minute + 1  Else    m = T.Minute  End If    If m > 60 Then    h = (T.Hour + 1) Mod 24    m = 0  Else    h = T.Hour  End If    Result = Format(h,"00") + ":" + Format(m,"00")    Return Result  End FunctionManyMoonsModule.ReadLatitude:Function ReadLatitude() As Double  Return Val(ReadLocation("latitude"))End FunctionManyMoonsModule.ReadLongitude:Function ReadLongitude() As Double  Return Val(ReadLocation("longitude"))End FunctionManyMoonsModule.ReadDST:Function ReadDST() As Boolean  Dim DLS as Integer  Dim Result as Boolean    DLS = Val(ReadLocation("DLS"))    If DLS = 1 Then    Result = True  Else    Result = False  End If    Return ResultEnd FunctionManyMoonsModule.ReadGMTDelta:Function ReadGMTDelta() As Integer  Return Val(ReadLocation("hours from GMT"))End FunctionManyMoonsModule.RoundHMSTime:Function RoundHMSTime(T as mmDate) As mmDate  Dim h, m as Integer  Dim Result as mmDate    If T.Second >= 30 Then    m = T.Minute + 1  Else    m = T.Minute  End If    If m > 60 Then    h = (T.Hour + 1) Mod 24    m = 0  Else    h = T.Hour  End If    Result = New mmDate    Result.Hour = h  Result.Minute = m  Result.Second = 0    Return Result  End FunctionManyMoonsModule.UTC_MJD_FromMJDAndLocalSecs:Function UTC_MJD_FromMJDAndLocalSecs(MJD as Double, SecondsSinceLocalMidnight as Integer) As Double  Dim UTC_MJD as double  Dim LocalHour, UTCHour as double    'Calculate what the UTC MJD is for given moment  LocalHour = SecondsSinceLocalMidnight / 3600  UTCHour = LocalHour - AdjTimezone  If UTCHour >= 24 then    'It's tomorrow in Greenwich!    UTC_MJD = MJD + 1  Elseif UTCHour <= 0 then    'It's yesterday in Greenwich!    UTC_MJD = MJD - 1  Else    UTC_MJD = MJD  End if    Return UTC_MJDEnd FunctionManyMoonsModule.UTCHourFromLocalHour:Function UTCHourFromLocalHour(Hour as Integer, Minute as Integer, Second as Integer) As Double  Dim UTCHour as Double  Dim RoundUTCHour as Integer    RoundUTCHour = Hour - AdjTimezone  If RoundUTCHour >= 24 then    'It's tomorrow in Greenwich!    RoundUTCHour = RoundUTCHour - 24  ElseIf RoundUTCHour < 0 Then    'It's yesterday in Greenwich!    RoundUTCHour = RoundUTCHour + 24  End If    UTCHour = DecimalTimeFromHMSTime(MakeTime(RoundUTCHour,Minute,Second))    Return UTCHourEnd FunctionManyMoonsModule.UdtFromMJDAndLocalTime:Function UdtFromMJDAndLocalTime(MJD as Double, Hour as Integer, Minute as Integer, Second as Integer) As String  Dim Secs, UTC_MJD, JDN, FracUSecs, CurT, CurTFrac, uSecsSinceMidnightUTC as Double  Dim uSecsPerTFrac, uSecsPerT, tPerDay, tFracsPerDay as Double  Dim G as mmDate  Dim UTCHour, UTCSecs, LocalSecs, CurYear, CurPJD as Double  Dim YearStr, DayStr, tStr, tFracStr, Result as String    uSecsPerTFrac = 86400  uSecsPerT = 1000 * uSecsPerTFrac  tPerDay = 1000  tFracsPerDay = 1000 * tPerDay    UTCHour = UTCHourFromLocalHour(Hour,Minute,Second)    'Calculate preliminaries from current Gregorian moment  LocalSecs = SecsSinceMidnight(Hour, Minute, Second)  UTC_MJD = UTC_MJD_FromMJDAndLocalSecs(MJD, LocalSecs)  JDN = JDNFromMJD(UTC_MJD)  G = GregDateFromJDN(JDN)    UTCSecs = SecsSinceMidnight(UTCHour, Minute, Second)  uSecsSinceMidnightUTC = UTCSecs * 1000000    CurYear = G.Year  CurPJD = GregPJDFromGregDate(G.Month,G.Day,G.Year)  CurT = (uSecsSinceMidnightUTC / uSecsPerT) mod tPerDay  FracUSecs = uSecsSinceMidnightUTC - (CurT * uSecsPerT)  CurTFrac = (FracUSecs / uSecsPerTFrac) mod 1000    YearStr = Format(CurYear,"0000")  DayStr = Format(CurPJD, "000")  tStr = Format(CurT, "000")  tFracStr = Format(CurTFrac, "000")    Result = "U"+" "+YearStr+" "+DayStr+" "+tStr+"."+tFracStr    Return Result  End FunctionPrefsWin.Open:Sub Open()  AdjustPrefsWindowEnd SubPrefsWin.GregBox.Action:Sub Action()  If Me.Value = True Then    GregStr="1"  Else    GregStr="0"  End IfEnd SubPrefsWin.WCBox.Action:Sub Action()  If Me.Value = True Then    WCStr="1"  Else    WCStr="0"  End IfEnd SubPrefsWin.SwatchBox.Action:Sub Action()  If Me.Value = True Then    SwatchStr="1"  Else    SwatchStr="0"  End IfEnd SubPrefsWin.ShireBox.Action:Sub Action()  If Me.Value = True Then    ShireStr="1"  Else    ShireStr="0"  End IfEnd SubPrefsWin.EldarBox.Action:Sub Action()  If Me.Value = True Then    EldarinStr="1"  Else    EldarinStr="0"  End IfEnd SubPrefsWin.StardateBox.Action:Sub Action()  If Me.Value = True Then    StardateStr="1"  Else    StardateStr="0"  End IfEnd SubPrefsWin.OKButton.Action:Sub Action()  PrefsWin.CloseEnd SubPrefsWin.DiscoBox.Action:Sub Action()  If Me.Value = True Then    DiscoStr="1"  Else    DiscoStr="0"  End IfEnd SubPrefsWin.BahaiBox.Action:Sub Action()  If Me.Value = True Then    BahaiStr="1"  Else    BahaiStr="0"  End IfEnd SubPrefsWin.IllumBox.Action:Sub Action()  If Me.Value = True Then    IllumStr="1"  Else    IllumStr="0"  End IfEnd SubDTrigModule.DegreesFromRadians:Function DegreesFromRadians(Radians as Double) As Double  Return Degrees(Radians/Pi*180)End FunctionDTrigModule.RadiansFromDegrees:Function RadiansFromDegrees(Degs as Double) As Double  Return Degs * Pi / 180End FunctionDTrigModule.SinD:Function SinD(Degrees as Double) As Double  Return Sin(RadiansFromDegrees(Degrees))End FunctionDTrigModule.CosD:Function CosD(Degrees as Double) As Double  Return Cos(RadiansFromDegrees(Degrees))End FunctionDTrigModule.TanD:Function TanD(Degrees as Double) As Double  Return Tan(RadiansFromDegrees(Degrees))End FunctionDTrigModule.AtanD:Function AtanD(TheInput as Double) As Double  Return DegreesFromRadians(Atan(TheInput))End FunctionDTrigModule.AsinD:Function AsinD(TheInput as Double) As Double  Return DegreesFromRadians(Asin(TheInput))End FunctionDTrigModule.AcosD:Function AcosD(TheInput as Double) As Double  Return DegreesFromRadians(Acos(TheInput))End FunctionDTrigModule.Atan2D:Function Atan2D(y as Double, x as Double) As Double  Return DegreesFromRadians(Atan2(y,x))End FunctionDTrigModule.Degrees:Function Degrees(Theta as Double) As Double  Dim D as Double    D = RealMod(Theta, 360)    'If D is negative, it's now in the range of -360 to 0,  'so simply add +360  If D < 0 Then    D = D + 360  End If    Return DEnd FunctionDTrigModule.CalculatePi:Sub CalculatePi()  Pi = 4.0 * Atan(1)End SubDTrigModule.Atan2:Function Atan2(y as Double, x as Double) As Double  Dim Result as Double    'Returns its result in RADIANS    If x > 0 Then    Result = Atan(y/x)  ElseIf x < 0 Then    Result = Atan(y/x) + Pi  ElseIf y > 0 Then    Result = Pi/2  ElseIf y < 0 Then    Result = -Pi/2  Else    Result = 0  End If    Return ResultEnd FunctionUdtClockWin.Close:Sub Close()  UdtStop = trueEnd SubUdtClockWin.Open:Sub Open()  Dim T as date  dim C as UdtClockThread  Dim UTCHour as Integer    uSecsStart = Microseconds    T = new date    UTCHour = UTCHourFromLocalHour(T.Hour,T.Minute,T.Second)  InitialUSecsSinceMidnightUTC = 1000000 * SecsSinceMidnight(Floor(UTCHour),T.Minute,T.Second)    If not UdtStop then    C = new UdtClockThread    C.display    C.run  End if  End SubUdtClockThread.Display:Sub Display()  Dim YearStr, DayStr, tStr, tFracStr as String        if OldTFrac <> CurTFrac then         YearStr = Format(CurYear,"0000")    DayStr = Format(CurPJD, "000")    tStr = Format(CurT, "000")    tFracStr = Format(CurTFrac, "000")        UdtClockWin.TimeField.Text = "U"+" "+YearStr+" "+DayStr+" "+tStr+"."+tFracStr    OldTFrac = CurTFrac      End IfEnd SubUdtClockThread.Run:Sub Run()  Dim ElapsedUSecs, uSecsSinceMidnightUTC, uSecsPerT, uSecsPerTFrac as Double  Dim tPerDay, tFracsPerDay, JDN, MJD, UTC_MJD, Secs, FracUSecs as Double  Dim G as Date  Dim G2 as mmDate    uSecsPerTFrac = 86400  uSecsPerT = 1000 * uSecsPerTFrac  tPerDay = 1000  tFracsPerDay = 1000 * tPerDay    while not UdtStop     ElapsedUSecs = Microseconds - UdtClockWin.uSecsStart    uSecsSinceMidnightUTC = UdtClockWin.InitialUSecsSinceMidnightUTC+ElapsedUSecs        'Calculate preliminaries from current Gregorian moment    G = new date    JDN = JDNFromGregDate(G.Month, G.Day, G.Year)    MJD = MJDFromJDN(JDN)    Secs = SecsSinceMidnight(G.Hour, G.Minute, G.Second)    UTC_MJD = UTC_MJD_FromMJDAndLocalSecs(MJD, Secs)    JDN = JDNFromMJD(UTC_MJD)    G2 = GregDateFromJDN(JDN)        CurYear = G2.Year    CurPJD = GregPJDFromGregDate(G2.Month,G2.Day,G2.Year)    CurT = (uSecsSinceMidnightUTC / uSecsPerT) mod tPerDay    FracUSecs = uSecsSinceMidnightUTC - (CurT * uSecsPerT)    CurTFrac = (FracUSecs / uSecsPerTFrac) mod 1000        Display  wend  End Sub